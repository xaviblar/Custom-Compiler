//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Xavier\Downloads\Progra_Compiladores\Progra Compiladores\prograCompi\prograCompi\ParserProgra.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace prograCompi {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ParserProgra"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public interface IParserPrograVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>stateWriteAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStateWriteAST([NotNull] ParserProgra.StateWriteASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stateReturnAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStateReturnAST([NotNull] ParserProgra.StateReturnASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>boolFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBoolFactorAST([NotNull] ParserProgra.BoolFactorASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>tokenNewFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTokenNewFactorAST([NotNull] ParserProgra.TokenNewFactorASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stateReadAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStateReadAST([NotNull] ParserProgra.StateReadASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>statementForAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementForAST([NotNull] ParserProgra.StatementForASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>majorAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMajorAST([NotNull] ParserProgra.MajorASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprActParsAST</c>
	/// labeled alternative in <see cref="ParserProgra.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprActParsAST([NotNull] ParserProgra.ExprActParsASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>equalAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualAST([NotNull] ParserProgra.EqualASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>tokenConstConstDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.constDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTokenConstConstDeclAST([NotNull] ParserProgra.TokenConstConstDeclASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stateBreakAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStateBreakAST([NotNull] ParserProgra.StateBreakASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>typeVarDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeVarDeclAST([NotNull] ParserProgra.TypeVarDeclASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>tokenClassClassDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTokenClassClassDeclAST([NotNull] ParserProgra.TokenClassClassDeclASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>factorMulopFactorTermAST</c>
	/// labeled alternative in <see cref="ParserProgra.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFactorMulopFactorTermAST([NotNull] ParserProgra.FactorMulopFactorTermASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>typeIDFormParsAST</c>
	/// labeled alternative in <see cref="ParserProgra.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeIDFormParsAST([NotNull] ParserProgra.TypeIDFormParsASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>termAddlopExprAST</c>
	/// labeled alternative in <see cref="ParserProgra.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTermAddlopExprAST([NotNull] ParserProgra.TermAddlopExprASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>divAST</c>
	/// labeled alternative in <see cref="ParserProgra.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivAST([NotNull] ParserProgra.DivASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>addAST</c>
	/// labeled alternative in <see cref="ParserProgra.addlop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddAST([NotNull] ParserProgra.AddASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>designatorFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDesignatorFactorAST([NotNull] ParserProgra.DesignatorFactorASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>majorEqualAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMajorEqualAST([NotNull] ParserProgra.MajorEqualASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>minorAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMinorAST([NotNull] ParserProgra.MinorASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>condFactCondTermAST</c>
	/// labeled alternative in <see cref="ParserProgra.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCondFactCondTermAST([NotNull] ParserProgra.CondFactCondTermASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>designatorStatementAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDesignatorStatementAST([NotNull] ParserProgra.DesignatorStatementASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stateBlockAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStateBlockAST([NotNull] ParserProgra.StateBlockASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>statePyCAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatePyCAST([NotNull] ParserProgra.StatePyCASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>condTermConditionAST</c>
	/// labeled alternative in <see cref="ParserProgra.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCondTermConditionAST([NotNull] ParserProgra.CondTermConditionASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>statementBlockAST</c>
	/// labeled alternative in <see cref="ParserProgra.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementBlockAST([NotNull] ParserProgra.StatementBlockASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stateWhileAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStateWhileAST([NotNull] ParserProgra.StateWhileASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>numFactoAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumFactoAST([NotNull] ParserProgra.NumFactoASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>modAST</c>
	/// labeled alternative in <see cref="ParserProgra.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModAST([NotNull] ParserProgra.ModASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>idTypeAST</c>
	/// labeled alternative in <see cref="ParserProgra.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdTypeAST([NotNull] ParserProgra.IdTypeASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprRelopExprCondFactAST</c>
	/// labeled alternative in <see cref="ParserProgra.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprRelopExprCondFactAST([NotNull] ParserProgra.ExprRelopExprCondFactASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprFactorAST([NotNull] ParserProgra.ExprFactorASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>programTokenClassAST</c>
	/// labeled alternative in <see cref="ParserProgra.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgramTokenClassAST([NotNull] ParserProgra.ProgramTokenClassASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>designLabelAST</c>
	/// labeled alternative in <see cref="ParserProgra.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDesignLabelAST([NotNull] ParserProgra.DesignLabelASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>subAST</c>
	/// labeled alternative in <see cref="ParserProgra.addlop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubAST([NotNull] ParserProgra.SubASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>charFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCharFactorAST([NotNull] ParserProgra.CharFactorASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>differentAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDifferentAST([NotNull] ParserProgra.DifferentASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>programAuxLabelAST</c>
	/// labeled alternative in <see cref="ParserProgra.programAux"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgramAuxLabelAST([NotNull] ParserProgra.ProgramAuxLabelASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>minorEqualAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMinorEqualAST([NotNull] ParserProgra.MinorEqualASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>mulAST</c>
	/// labeled alternative in <see cref="ParserProgra.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulAST([NotNull] ParserProgra.MulASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>typeFormVarMethodDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeFormVarMethodDeclAST([NotNull] ParserProgra.TypeFormVarMethodDeclASTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>statementIFAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementIFAST([NotNull] ParserProgra.StatementIFASTContext context);
}
} // namespace prograCompi
