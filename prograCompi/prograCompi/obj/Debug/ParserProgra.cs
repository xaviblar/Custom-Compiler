//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Xavier\Downloads\Progra_Compiladores\Progra Compiladores\prograCompi\prograCompi\ParserProgra.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace prograCompi {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class ParserProgra : Parser {
	public const int
		ADD=17, TokenNew=7, Sharp=34, DP=31, QSym=43, IfMinorEqual=49, ID=27, 
		TokenReturn=9, SUB=18, MUL=15, TokenWhile=11, PCD=23, PCI=22, AND=39, 
		PyC=28, TokenFor=12, Inc=41, IfEqual=46, FLOAT=53, C=29, ComillaSimple=32, 
		LComment=36, CHAR=54, OComment=37, COMMENT=55, TokenClass=2, P=30, CComment=38, 
		ASym=44, TokenConst=4, IfMinor=51, WS=56, TokenIf=6, Dolar=33, TokenBreak=3, 
		ESym=45, MOD=19, OR=40, Dec=42, IfMajor=50, Comilla=26, EQUAL=14, Num=1, 
		TokenElse=5, TokenWrite=13, TokenVoid=10, IfDifferent=47, TokenRead=8, 
		DIV=16, PD=21, BOOL=52, LD=25, PI=20, Underscore=35, LI=24, IfMajorEqual=48;
	public static readonly string[] tokenNames = {
		"<INVALID>", "Num", "'class'", "'break'", "'const'", "'else'", "'if'", 
		"'new'", "'read'", "'return'", "'void'", "'while'", "'for'", "'write'", 
		"'='", "'*'", "'/'", "'+'", "'-'", "'%'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'\"'", "ID", "';'", "','", "'.'", "':'", "'''", "'$'", 
		"'#'", "'_'", "'//'", "'/*'", "'*/'", "'&&'", "'||'", "'++'", "'--'", 
		"'?'", "'@'", "'!'", "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "BOOL", 
		"FLOAT", "CHAR", "COMMENT", "WS"
	};
	public const int
		RULE_program = 0, RULE_programAux = 1, RULE_constDecl = 2, RULE_varDecl = 3, 
		RULE_classDecl = 4, RULE_methodDecl = 5, RULE_formPars = 6, RULE_type = 7, 
		RULE_statement = 8, RULE_block = 9, RULE_actPars = 10, RULE_condition = 11, 
		RULE_condTerm = 12, RULE_condFact = 13, RULE_expr = 14, RULE_term = 15, 
		RULE_factor = 16, RULE_designator = 17, RULE_relop = 18, RULE_addlop = 19, 
		RULE_mulop = 20;
	public static readonly string[] ruleNames = {
		"program", "programAux", "constDecl", "varDecl", "classDecl", "methodDecl", 
		"formPars", "type", "statement", "block", "actPars", "condition", "condTerm", 
		"condFact", "expr", "term", "factor", "designator", "relop", "addlop", 
		"mulop"
	};

	public override string GrammarFileName { get { return "ParserProgra.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ParserProgra(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgramTokenClassASTContext : ProgramContext {
		public ITerminalNode LD() { return GetToken(ParserProgra.LD, 0); }
		public ITerminalNode ID() { return GetToken(ParserProgra.ID, 0); }
		public IReadOnlyList<MethodDeclContext> methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		public IReadOnlyList<ProgramAuxContext> programAux() {
			return GetRuleContexts<ProgramAuxContext>();
		}
		public ITerminalNode LI() { return GetToken(ParserProgra.LI, 0); }
		public ITerminalNode TokenClass() { return GetToken(ParserProgra.TokenClass, 0); }
		public ProgramAuxContext programAux(int i) {
			return GetRuleContext<ProgramAuxContext>(i);
		}
		public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramTokenClassASTContext(ProgramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterProgramTokenClassAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitProgramTokenClassAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramTokenClassAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			_localctx = new ProgramTokenClassASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(TokenClass);
			State = 43; Match(ID);
			State = 47;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TokenClass) | (1L << TokenConst) | (1L << ID))) != 0)) {
				{
				{
				State = 44; programAux();
				}
				}
				State = 49;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 50; Match(LI);
			State = 54;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TokenVoid || _la==ID) {
				{
				{
				State = 51; methodDecl();
				}
				}
				State = 56;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 57; Match(LD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramAuxContext : ParserRuleContext {
		public ProgramAuxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programAux; } }
	 
		public ProgramAuxContext() { }
		public virtual void CopyFrom(ProgramAuxContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgramAuxLabelASTContext : ProgramAuxContext {
		public ConstDeclContext constDecl() {
			return GetRuleContext<ConstDeclContext>(0);
		}
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public ProgramAuxLabelASTContext(ProgramAuxContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterProgramAuxLabelAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitProgramAuxLabelAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramAuxLabelAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramAuxContext programAux() {
		ProgramAuxContext _localctx = new ProgramAuxContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_programAux);
		try {
			_localctx = new ProgramAuxLabelASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			switch (_input.La(1)) {
			case TokenConst:
				{
				State = 59; constDecl();
				}
				break;
			case ID:
				{
				State = 60; varDecl();
				}
				break;
			case TokenClass:
				{
				State = 61; classDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
	 
		public ConstDeclContext() { }
		public virtual void CopyFrom(ConstDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TokenConstConstDeclASTContext : ConstDeclContext {
		public ITerminalNode TokenConst() { return GetToken(ParserProgra.TokenConst, 0); }
		public ITerminalNode ID() { return GetToken(ParserProgra.ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(ParserProgra.EQUAL, 0); }
		public ITerminalNode Num() { return GetToken(ParserProgra.Num, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CHAR() { return GetToken(ParserProgra.CHAR, 0); }
		public ITerminalNode PyC() { return GetToken(ParserProgra.PyC, 0); }
		public TokenConstConstDeclASTContext(ConstDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterTokenConstConstDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitTokenConstConstDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokenConstConstDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_constDecl);
		int _la;
		try {
			_localctx = new TokenConstConstDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(TokenConst);
			State = 65; type();
			State = 66; Match(ID);
			State = 67; Match(EQUAL);
			State = 68;
			_la = _input.La(1);
			if ( !(_la==Num || _la==CHAR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 69; Match(PyC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeVarDeclASTContext : VarDeclContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(ParserProgra.ID); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID(int i) {
			return GetToken(ParserProgra.ID, i);
		}
		public IReadOnlyList<ITerminalNode> C() { return GetTokens(ParserProgra.C); }
		public ITerminalNode PyC() { return GetToken(ParserProgra.PyC, 0); }
		public ITerminalNode C(int i) {
			return GetToken(ParserProgra.C, i);
		}
		public TypeVarDeclASTContext(VarDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterTypeVarDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitTypeVarDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeVarDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_varDecl);
		int _la;
		try {
			_localctx = new TypeVarDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; type();
			State = 72; Match(ID);
			State = 77;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==C) {
				{
				{
				State = 73; Match(C);
				State = 74; Match(ID);
				}
				}
				State = 79;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 80; Match(PyC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
	 
		public ClassDeclContext() { }
		public virtual void CopyFrom(ClassDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TokenClassClassDeclASTContext : ClassDeclContext {
		public ITerminalNode LD() { return GetToken(ParserProgra.LD, 0); }
		public ITerminalNode ID() { return GetToken(ParserProgra.ID, 0); }
		public ITerminalNode LI() { return GetToken(ParserProgra.LI, 0); }
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public IReadOnlyList<VarDeclContext> varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public ITerminalNode TokenClass() { return GetToken(ParserProgra.TokenClass, 0); }
		public TokenClassClassDeclASTContext(ClassDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterTokenClassClassDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitTokenClassClassDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokenClassClassDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_classDecl);
		int _la;
		try {
			_localctx = new TokenClassClassDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(TokenClass);
			State = 83; Match(ID);
			State = 84; Match(LI);
			State = 88;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 85; varDecl();
				}
				}
				State = 90;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 91; Match(LD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
	 
		public MethodDeclContext() { }
		public virtual void CopyFrom(MethodDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeFormVarMethodDeclASTContext : MethodDeclContext {
		public TypeContext typeL;
		public IToken tVoid;
		public FormParsContext formParsL;
		public ITerminalNode ID() { return GetToken(ParserProgra.ID, 0); }
		public ITerminalNode TokenVoid() { return GetToken(ParserProgra.TokenVoid, 0); }
		public ITerminalNode PI() { return GetToken(ParserProgra.PI, 0); }
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public IReadOnlyList<VarDeclContext> varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PD() { return GetToken(ParserProgra.PD, 0); }
		public TypeFormVarMethodDeclASTContext(MethodDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterTypeFormVarMethodDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitTypeFormVarMethodDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeFormVarMethodDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_methodDecl);
		int _la;
		try {
			_localctx = new TypeFormVarMethodDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			switch (_input.La(1)) {
			case ID:
				{
				State = 93; ((TypeFormVarMethodDeclASTContext)_localctx).typeL = type();
				}
				break;
			case TokenVoid:
				{
				State = 94; ((TypeFormVarMethodDeclASTContext)_localctx).tVoid = Match(TokenVoid);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 97; Match(ID);
			State = 98; Match(PI);
			State = 101;
			switch (_input.La(1)) {
			case ID:
				{
				State = 99; ((TypeFormVarMethodDeclASTContext)_localctx).formParsL = formPars();
				}
				break;
			case PD:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 103; Match(PD);
			State = 107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 104; varDecl();
				}
				}
				State = 109;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 110; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	 
		public FormParsContext() { }
		public virtual void CopyFrom(FormParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeIDFormParsASTContext : FormParsContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(ParserProgra.ID); }
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IReadOnlyList<TypeContext> type() {
			return GetRuleContexts<TypeContext>();
		}
		public ITerminalNode ID(int i) {
			return GetToken(ParserProgra.ID, i);
		}
		public IReadOnlyList<ITerminalNode> C() { return GetTokens(ParserProgra.C); }
		public ITerminalNode C(int i) {
			return GetToken(ParserProgra.C, i);
		}
		public TypeIDFormParsASTContext(FormParsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterTypeIDFormParsAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitTypeIDFormParsAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIDFormParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_formPars);
		int _la;
		try {
			_localctx = new TypeIDFormParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; type();
			State = 113; Match(ID);
			State = 120;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==C) {
				{
				{
				State = 114; Match(C);
				State = 115; type();
				State = 116; Match(ID);
				}
				}
				State = 122;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdTypeASTContext : TypeContext {
		public IToken pci;
		public IToken pcd;
		public ITerminalNode ID() { return GetToken(ParserProgra.ID, 0); }
		public ITerminalNode PCI() { return GetToken(ParserProgra.PCI, 0); }
		public ITerminalNode PCD() { return GetToken(ParserProgra.PCD, 0); }
		public IdTypeASTContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterIdTypeAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitIdTypeAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdTypeAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_type);
		try {
			_localctx = new IdTypeASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(ID);
			State = 127;
			switch (_input.La(1)) {
			case PCI:
				{
				{
				State = 124; ((IdTypeASTContext)_localctx).pci = Match(PCI);
				State = 125; ((IdTypeASTContext)_localctx).pcd = Match(PCD);
				}
				}
				break;
			case ID:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StateWriteASTContext : StatementContext {
		public ITerminalNode PI() { return GetToken(ParserProgra.PI, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Num() { return GetToken(ParserProgra.Num, 0); }
		public ITerminalNode TokenWrite() { return GetToken(ParserProgra.TokenWrite, 0); }
		public ITerminalNode C() { return GetToken(ParserProgra.C, 0); }
		public ITerminalNode PD() { return GetToken(ParserProgra.PD, 0); }
		public ITerminalNode PyC() { return GetToken(ParserProgra.PyC, 0); }
		public StateWriteASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterStateWriteAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitStateWriteAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateWriteAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StateBlockASTContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StateBlockASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterStateBlockAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitStateBlockAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateBlockAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StateReturnASTContext : StatementContext {
		public ExprContext exprL;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode TokenReturn() { return GetToken(ParserProgra.TokenReturn, 0); }
		public ITerminalNode PyC() { return GetToken(ParserProgra.PyC, 0); }
		public StateReturnASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterStateReturnAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitStateReturnAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateReturnAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatePyCASTContext : StatementContext {
		public ITerminalNode PyC() { return GetToken(ParserProgra.PyC, 0); }
		public StatePyCASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterStatePyCAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitStatePyCAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatePyCAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StateReadASTContext : StatementContext {
		public ITerminalNode PI() { return GetToken(ParserProgra.PI, 0); }
		public ITerminalNode TokenRead() { return GetToken(ParserProgra.TokenRead, 0); }
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode PD() { return GetToken(ParserProgra.PD, 0); }
		public ITerminalNode PyC() { return GetToken(ParserProgra.PyC, 0); }
		public StateReadASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterStateReadAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitStateReadAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateReadAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementForASTContext : StatementContext {
		public ConditionContext conditionL;
		public ITerminalNode PI() { return GetToken(ParserProgra.PI, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public IReadOnlyList<ITerminalNode> PyC() { return GetTokens(ParserProgra.PyC); }
		public ITerminalNode PD() { return GetToken(ParserProgra.PD, 0); }
		public ITerminalNode TokenFor() { return GetToken(ParserProgra.TokenFor, 0); }
		public ITerminalNode PyC(int i) {
			return GetToken(ParserProgra.PyC, i);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementForASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterStatementForAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitStatementForAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementForAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StateWhileASTContext : StatementContext {
		public ITerminalNode PI() { return GetToken(ParserProgra.PI, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode PD() { return GetToken(ParserProgra.PD, 0); }
		public ITerminalNode TokenWhile() { return GetToken(ParserProgra.TokenWhile, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StateWhileASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterStateWhileAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitStateWhileAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateWhileAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StateBreakASTContext : StatementContext {
		public ITerminalNode TokenBreak() { return GetToken(ParserProgra.TokenBreak, 0); }
		public ITerminalNode PyC() { return GetToken(ParserProgra.PyC, 0); }
		public StateBreakASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterStateBreakAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitStateBreakAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateBreakAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorStatementASTContext : StatementContext {
		public ExprContext exprL;
		public ActParsContext actParsL;
		public IToken incL;
		public IToken decL;
		public ITerminalNode EQUAL() { return GetToken(ParserProgra.EQUAL, 0); }
		public ITerminalNode PI() { return GetToken(ParserProgra.PI, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Inc() { return GetToken(ParserProgra.Inc, 0); }
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode PyC() { return GetToken(ParserProgra.PyC, 0); }
		public ITerminalNode PD() { return GetToken(ParserProgra.PD, 0); }
		public ITerminalNode Dec() { return GetToken(ParserProgra.Dec, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public DesignatorStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterDesignatorStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitDesignatorStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementIFASTContext : StatementContext {
		public ITerminalNode TokenIf() { return GetToken(ParserProgra.TokenIf, 0); }
		public ITerminalNode PI() { return GetToken(ParserProgra.PI, 0); }
		public ITerminalNode TokenElse() { return GetToken(ParserProgra.TokenElse, 0); }
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public ITerminalNode PD() { return GetToken(ParserProgra.PD, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementIFASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterStatementIFAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitStatementIFAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementIFAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 203;
			switch (_input.La(1)) {
			case ID:
				_localctx = new DesignatorStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; designator();
				State = 140;
				switch (_input.La(1)) {
				case EQUAL:
					{
					State = 130; Match(EQUAL);
					State = 131; ((DesignatorStatementASTContext)_localctx).exprL = expr();
					}
					break;
				case PI:
					{
					State = 132; Match(PI);
					State = 135;
					switch (_input.La(1)) {
					case Num:
					case TokenNew:
					case SUB:
					case PI:
					case ID:
					case BOOL:
					case CHAR:
						{
						State = 133; ((DesignatorStatementASTContext)_localctx).actParsL = actPars();
						}
						break;
					case PD:
						{
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 137; Match(PD);
					}
					break;
				case Inc:
					{
					State = 138; ((DesignatorStatementASTContext)_localctx).incL = Match(Inc);
					}
					break;
				case Dec:
					{
					State = 139; ((DesignatorStatementASTContext)_localctx).decL = Match(Dec);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 142; Match(PyC);
				}
				break;
			case TokenIf:
				_localctx = new StatementIFASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 144; Match(TokenIf);
				State = 145; Match(PI);
				State = 146; condition();
				State = 147; Match(PD);
				State = 148; statement();
				State = 152;
				switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					State = 149; Match(TokenElse);
					State = 150; statement();
					}
					break;

				case 2:
					{
					}
					break;
				}
				}
				break;
			case TokenFor:
				_localctx = new StatementForASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 154; Match(TokenFor);
				State = 155; Match(PI);
				State = 156; expr();
				State = 157; Match(PyC);
				State = 160;
				switch (_input.La(1)) {
				case Num:
				case TokenNew:
				case SUB:
				case PI:
				case ID:
				case BOOL:
				case CHAR:
					{
					State = 158; ((StatementForASTContext)_localctx).conditionL = condition();
					}
					break;
				case PyC:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 162; Match(PyC);
				State = 165;
				switch (_input.La(1)) {
				case TokenBreak:
				case TokenIf:
				case TokenRead:
				case TokenReturn:
				case TokenWhile:
				case TokenFor:
				case TokenWrite:
				case LI:
				case ID:
				case PyC:
					{
					State = 163; statement();
					}
					break;
				case PD:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 167; Match(PD);
				State = 168; statement();
				}
				break;
			case TokenWhile:
				_localctx = new StateWhileASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 170; Match(TokenWhile);
				State = 171; Match(PI);
				State = 172; condition();
				State = 173; Match(PD);
				State = 174; statement();
				}
				break;
			case TokenBreak:
				_localctx = new StateBreakASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 176; Match(TokenBreak);
				State = 177; Match(PyC);
				}
				break;
			case TokenReturn:
				_localctx = new StateReturnASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 178; Match(TokenReturn);
				State = 181;
				switch (_input.La(1)) {
				case Num:
				case TokenNew:
				case SUB:
				case PI:
				case ID:
				case BOOL:
				case CHAR:
					{
					State = 179; ((StateReturnASTContext)_localctx).exprL = expr();
					}
					break;
				case PyC:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 183; Match(PyC);
				}
				break;
			case TokenRead:
				_localctx = new StateReadASTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 184; Match(TokenRead);
				State = 185; Match(PI);
				State = 186; designator();
				State = 187; Match(PD);
				State = 188; Match(PyC);
				}
				break;
			case TokenWrite:
				_localctx = new StateWriteASTContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 190; Match(TokenWrite);
				State = 191; Match(PI);
				State = 192; expr();
				State = 196;
				switch (_input.La(1)) {
				case C:
					{
					State = 193; Match(C);
					State = 194; Match(Num);
					}
					break;
				case PD:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 198; Match(PD);
				State = 199; Match(PyC);
				}
				break;
			case LI:
				_localctx = new StateBlockASTContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 201; block();
				}
				break;
			case PyC:
				_localctx = new StatePyCASTContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 202; Match(PyC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementBlockASTContext : BlockContext {
		public ITerminalNode LD() { return GetToken(ParserProgra.LD, 0); }
		public ITerminalNode LI() { return GetToken(ParserProgra.LI, 0); }
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementBlockASTContext(BlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterStatementBlockAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitStatementBlockAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlockAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			_localctx = new StatementBlockASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(LI);
			State = 209;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TokenBreak) | (1L << TokenIf) | (1L << TokenRead) | (1L << TokenReturn) | (1L << TokenWhile) | (1L << TokenFor) | (1L << TokenWrite) | (1L << LI) | (1L << ID) | (1L << PyC))) != 0)) {
				{
				{
				State = 206; statement();
				}
				}
				State = 211;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 212; Match(LD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	 
		public ActParsContext() { }
		public virtual void CopyFrom(ActParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprActParsASTContext : ActParsContext {
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IReadOnlyList<ITerminalNode> C() { return GetTokens(ParserProgra.C); }
		public ITerminalNode C(int i) {
			return GetToken(ParserProgra.C, i);
		}
		public ExprActParsASTContext(ActParsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterExprActParsAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitExprActParsAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprActParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_actPars);
		int _la;
		try {
			_localctx = new ExprActParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; expr();
			State = 219;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==C) {
				{
				{
				State = 215; Match(C);
				State = 216; expr();
				}
				}
				State = 221;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondTermConditionASTContext : ConditionContext {
		public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		public IReadOnlyList<ITerminalNode> OR() { return GetTokens(ParserProgra.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ParserProgra.OR, i);
		}
		public IReadOnlyList<CondTermContext> condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		public CondTermConditionASTContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterCondTermConditionAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitCondTermConditionAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTermConditionAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_condition);
		int _la;
		try {
			_localctx = new CondTermConditionASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; condTerm();
			State = 227;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR) {
				{
				{
				State = 223; Match(OR);
				State = 224; condTerm();
				}
				}
				State = 229;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	 
		public CondTermContext() { }
		public virtual void CopyFrom(CondTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondFactCondTermASTContext : CondTermContext {
		public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		public ITerminalNode AND(int i) {
			return GetToken(ParserProgra.AND, i);
		}
		public IReadOnlyList<CondFactContext> condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		public IReadOnlyList<ITerminalNode> AND() { return GetTokens(ParserProgra.AND); }
		public CondFactCondTermASTContext(CondTermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterCondFactCondTermAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitCondFactCondTermAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFactCondTermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_condTerm);
		int _la;
		try {
			_localctx = new CondFactCondTermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; condFact();
			State = 235;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AND) {
				{
				{
				State = 231; Match(AND);
				State = 232; condFact();
				}
				}
				State = 237;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	 
		public CondFactContext() { }
		public virtual void CopyFrom(CondFactContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprRelopExprCondFactASTContext : CondFactContext {
		public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprRelopExprCondFactASTContext(CondFactContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterExprRelopExprCondFactAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitExprRelopExprCondFactAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprRelopExprCondFactAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_condFact);
		try {
			_localctx = new ExprRelopExprCondFactASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; expr();
			State = 239; relop();
			State = 240; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public string tipo;
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
			this.tipo = context.tipo;
		}
	}
	public partial class TermAddlopExprASTContext : ExprContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode SUB() { return GetToken(ParserProgra.SUB, 0); }
		public IReadOnlyList<AddlopContext> addlop() {
			return GetRuleContexts<AddlopContext>();
		}
		public AddlopContext addlop(int i) {
			return GetRuleContext<AddlopContext>(i);
		}
		public TermAddlopExprASTContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterTermAddlopExprAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitTermAddlopExprAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermAddlopExprAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			_localctx = new TermAddlopExprASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			switch (_input.La(1)) {
			case SUB:
				{
				State = 242; Match(SUB);
				}
				break;
			case Num:
			case TokenNew:
			case PI:
			case ID:
			case BOOL:
			case CHAR:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 246; term();
			State = 252;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 247; addlop();
				State = 248; term();
				}
				}
				State = 254;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactorMulopFactorTermASTContext : TermContext {
		public IReadOnlyList<FactorContext> factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public IReadOnlyList<MulopContext> mulop() {
			return GetRuleContexts<MulopContext>();
		}
		public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public FactorMulopFactorTermASTContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterFactorMulopFactorTermAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitFactorMulopFactorTermAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorMulopFactorTermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_term);
		int _la;
		try {
			_localctx = new FactorMulopFactorTermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; factor();
			State = 261;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) {
				{
				{
				State = 256; mulop();
				State = 257; factor();
				}
				}
				State = 263;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprFactorASTContext : FactorContext {
		public ITerminalNode PI() { return GetToken(ParserProgra.PI, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PD() { return GetToken(ParserProgra.PD, 0); }
		public ExprFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterExprFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitExprFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolFactorASTContext : FactorContext {
		public ITerminalNode BOOL() { return GetToken(ParserProgra.BOOL, 0); }
		public BoolFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterBoolFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitBoolFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TokenNewFactorASTContext : FactorContext {
		public ITerminalNode TokenNew() { return GetToken(ParserProgra.TokenNew, 0); }
		public ITerminalNode ID() { return GetToken(ParserProgra.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PCI() { return GetToken(ParserProgra.PCI, 0); }
		public ITerminalNode PCD() { return GetToken(ParserProgra.PCD, 0); }
		public TokenNewFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterTokenNewFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitTokenNewFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokenNewFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorFactorASTContext : FactorContext {
		public ITerminalNode PI() { return GetToken(ParserProgra.PI, 0); }
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode PD() { return GetToken(ParserProgra.PD, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public DesignatorFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterDesignatorFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitDesignatorFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumFactoASTContext : FactorContext {
		public ITerminalNode Num() { return GetToken(ParserProgra.Num, 0); }
		public NumFactoASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterNumFactoAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitNumFactoAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumFactoAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFactorASTContext : FactorContext {
		public ITerminalNode CHAR() { return GetToken(ParserProgra.CHAR, 0); }
		public CharFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterCharFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitCharFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_factor);
		try {
			State = 290;
			switch (_input.La(1)) {
			case ID:
				_localctx = new DesignatorFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 264; designator();
				State = 272;
				switch (_input.La(1)) {
				case PI:
					{
					{
					State = 265; Match(PI);
					State = 268;
					switch (_input.La(1)) {
					case Num:
					case TokenNew:
					case SUB:
					case PI:
					case ID:
					case BOOL:
					case CHAR:
						{
						State = 266; actPars();
						}
						break;
					case PD:
						{
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 270; Match(PD);
					}
					}
					break;
				case MUL:
				case DIV:
				case ADD:
				case SUB:
				case MOD:
				case PD:
				case PCD:
				case PyC:
				case C:
				case AND:
				case OR:
				case IfEqual:
				case IfDifferent:
				case IfMajorEqual:
				case IfMinorEqual:
				case IfMajor:
				case IfMinor:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case Num:
				_localctx = new NumFactoASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 274; Match(Num);
				}
				break;
			case CHAR:
				_localctx = new CharFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 275; Match(CHAR);
				}
				break;
			case BOOL:
				_localctx = new BoolFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 276; Match(BOOL);
				}
				break;
			case TokenNew:
				_localctx = new TokenNewFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 277; Match(TokenNew);
				State = 278; Match(ID);
				State = 284;
				switch (_input.La(1)) {
				case PCI:
					{
					State = 279; Match(PCI);
					State = 280; expr();
					State = 281; Match(PCD);
					}
					break;
				case MUL:
				case DIV:
				case ADD:
				case SUB:
				case MOD:
				case PD:
				case PCD:
				case PyC:
				case C:
				case AND:
				case OR:
				case IfEqual:
				case IfDifferent:
				case IfMajorEqual:
				case IfMinorEqual:
				case IfMajor:
				case IfMinor:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PI:
				_localctx = new ExprFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 286; Match(PI);
				State = 287; expr();
				State = 288; Match(PD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	 
		public DesignatorContext() { }
		public virtual void CopyFrom(DesignatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DesignLabelASTContext : DesignatorContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(ParserProgra.ID); }
		public ITerminalNode PCD(int i) {
			return GetToken(ParserProgra.PCD, i);
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ID(int i) {
			return GetToken(ParserProgra.ID, i);
		}
		public IReadOnlyList<ITerminalNode> PCI() { return GetTokens(ParserProgra.PCI); }
		public IReadOnlyList<ITerminalNode> PCD() { return GetTokens(ParserProgra.PCD); }
		public ITerminalNode P(int i) {
			return GetToken(ParserProgra.P, i);
		}
		public ITerminalNode PCI(int i) {
			return GetToken(ParserProgra.PCI, i);
		}
		public IReadOnlyList<ITerminalNode> P() { return GetTokens(ParserProgra.P); }
		public DesignLabelASTContext(DesignatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterDesignLabelAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitDesignLabelAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignLabelAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_designator);
		int _la;
		try {
			_localctx = new DesignLabelASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(ID);
			State = 301;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PCI || _la==P) {
				{
				State = 299;
				switch (_input.La(1)) {
				case P:
					{
					State = 293; Match(P);
					State = 294; Match(ID);
					}
					break;
				case PCI:
					{
					State = 295; Match(PCI);
					State = 296; expr();
					State = 297; Match(PCD);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 303;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
	 
		public RelopContext() { }
		public virtual void CopyFrom(RelopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MajorASTContext : RelopContext {
		public ITerminalNode IfMajor() { return GetToken(ParserProgra.IfMajor, 0); }
		public MajorASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterMajorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitMajorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMajorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualASTContext : RelopContext {
		public ITerminalNode IfEqual() { return GetToken(ParserProgra.IfEqual, 0); }
		public EqualASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterEqualAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitEqualAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MajorEqualASTContext : RelopContext {
		public ITerminalNode IfMajorEqual() { return GetToken(ParserProgra.IfMajorEqual, 0); }
		public MajorEqualASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterMajorEqualAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitMajorEqualAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMajorEqualAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinorASTContext : RelopContext {
		public ITerminalNode IfMinor() { return GetToken(ParserProgra.IfMinor, 0); }
		public MinorASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterMinorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitMinorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DifferentASTContext : RelopContext {
		public ITerminalNode IfDifferent() { return GetToken(ParserProgra.IfDifferent, 0); }
		public DifferentASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterDifferentAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitDifferentAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDifferentAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinorEqualASTContext : RelopContext {
		public ITerminalNode IfMinorEqual() { return GetToken(ParserProgra.IfMinorEqual, 0); }
		public MinorEqualASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterMinorEqualAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitMinorEqualAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinorEqualAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_relop);
		try {
			State = 310;
			switch (_input.La(1)) {
			case IfEqual:
				_localctx = new EqualASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 304; Match(IfEqual);
				}
				break;
			case IfDifferent:
				_localctx = new DifferentASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 305; Match(IfDifferent);
				}
				break;
			case IfMajor:
				_localctx = new MajorASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 306; Match(IfMajor);
				}
				break;
			case IfMajorEqual:
				_localctx = new MajorEqualASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 307; Match(IfMajorEqual);
				}
				break;
			case IfMinor:
				_localctx = new MinorASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 308; Match(IfMinor);
				}
				break;
			case IfMinorEqual:
				_localctx = new MinorEqualASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 309; Match(IfMinorEqual);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddlopContext : ParserRuleContext {
		public AddlopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addlop; } }
	 
		public AddlopContext() { }
		public virtual void CopyFrom(AddlopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddASTContext : AddlopContext {
		public ITerminalNode ADD() { return GetToken(ParserProgra.ADD, 0); }
		public AddASTContext(AddlopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterAddAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitAddAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubASTContext : AddlopContext {
		public ITerminalNode SUB() { return GetToken(ParserProgra.SUB, 0); }
		public SubASTContext(AddlopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterSubAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitSubAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddlopContext addlop() {
		AddlopContext _localctx = new AddlopContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_addlop);
		try {
			State = 314;
			switch (_input.La(1)) {
			case ADD:
				_localctx = new AddASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 312; Match(ADD);
				}
				break;
			case SUB:
				_localctx = new SubASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 313; Match(SUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
	 
		public MulopContext() { }
		public virtual void CopyFrom(MulopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivASTContext : MulopContext {
		public ITerminalNode DIV() { return GetToken(ParserProgra.DIV, 0); }
		public DivASTContext(MulopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterDivAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitDivAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModASTContext : MulopContext {
		public ITerminalNode MOD() { return GetToken(ParserProgra.MOD, 0); }
		public ModASTContext(MulopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterModAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitModAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulASTContext : MulopContext {
		public ITerminalNode MUL() { return GetToken(ParserProgra.MUL, 0); }
		public MulASTContext(MulopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.EnterMulAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserPrograListener typedListener = listener as IParserPrograListener;
			if (typedListener != null) typedListener.ExitMulAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserPrograVisitor<TResult> typedVisitor = visitor as IParserPrograVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_mulop);
		try {
			State = 319;
			switch (_input.La(1)) {
			case MUL:
				_localctx = new MulASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 316; Match(MUL);
				}
				break;
			case DIV:
				_localctx = new DivASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 317; Match(DIV);
				}
				break;
			case MOD:
				_localctx = new ModASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 318; Match(MOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3:\x144\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x3\x2\x3\x2\x3\x2\a\x2\x30\n\x2\f\x2\xE\x2\x33\v\x2\x3\x2"+
		"\x3\x2\a\x2\x37\n\x2\f\x2\xE\x2:\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5"+
		"\x3\x41\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\a\x5N\n\x5\f\x5\xE\x5Q\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\a\x6Y\n\x6\f\x6\xE\x6\\\v\x6\x3\x6\x3\x6\x3\a\x3\a\x5\a\x62\n\a\x3"+
		"\a\x3\a\x3\a\x3\a\x5\ah\n\a\x3\a\x3\a\a\al\n\a\f\a\xE\ao\v\a\x3\a\x3\a"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\by\n\b\f\b\xE\b|\v\b\x3\t\x3\t\x3\t\x3"+
		"\t\x5\t\x82\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x8A\n\n\x3\n\x3\n\x3"+
		"\n\x5\n\x8F\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n"+
		"\x9B\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xA3\n\n\x3\n\x3\n\x3\n\x5"+
		"\n\xA8\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x5\n\xB8\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x5\n\xC7\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xCE\n\n\x3"+
		"\v\x3\v\a\v\xD2\n\v\f\v\xE\v\xD5\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\a\f\xDC"+
		"\n\f\f\f\xE\f\xDF\v\f\x3\r\x3\r\x3\r\a\r\xE4\n\r\f\r\xE\r\xE7\v\r\x3\xE"+
		"\x3\xE\x3\xE\a\xE\xEC\n\xE\f\xE\xE\xE\xEF\v\xE\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x5\x10\xF7\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\xFD"+
		"\n\x10\f\x10\xE\x10\x100\v\x10\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x106"+
		"\n\x11\f\x11\xE\x11\x109\v\x11\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x10F"+
		"\n\x12\x3\x12\x3\x12\x5\x12\x113\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x11F\n\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\x125\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\a\x13\x12E\n\x13\f\x13\xE\x13\x131\v\x13\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x5\x14\x139\n\x14\x3\x15\x3\x15\x5\x15\x13D"+
		"\n\x15\x3\x16\x3\x16\x3\x16\x5\x16\x142\n\x16\x3\x16\x2\x2\x2\x17\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2\x2\x3\x4\x2\x3\x3\x38\x38\x164"+
		"\x2,\x3\x2\x2\x2\x4@\x3\x2\x2\x2\x6\x42\x3\x2\x2\x2\bI\x3\x2\x2\x2\nT"+
		"\x3\x2\x2\x2\f\x61\x3\x2\x2\x2\xEr\x3\x2\x2\x2\x10}\x3\x2\x2\x2\x12\xCD"+
		"\x3\x2\x2\x2\x14\xCF\x3\x2\x2\x2\x16\xD8\x3\x2\x2\x2\x18\xE0\x3\x2\x2"+
		"\x2\x1A\xE8\x3\x2\x2\x2\x1C\xF0\x3\x2\x2\x2\x1E\xF6\x3\x2\x2\x2 \x101"+
		"\x3\x2\x2\x2\"\x124\x3\x2\x2\x2$\x126\x3\x2\x2\x2&\x138\x3\x2\x2\x2(\x13C"+
		"\x3\x2\x2\x2*\x141\x3\x2\x2\x2,-\a\x4\x2\x2-\x31\a\x1D\x2\x2.\x30\x5\x4"+
		"\x3\x2/.\x3\x2\x2\x2\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2"+
		"\x2\x2\x32\x34\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34\x38\a\x1A\x2\x2\x35"+
		"\x37\x5\f\a\x2\x36\x35\x3\x2\x2\x2\x37:\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2"+
		"\x38\x39\x3\x2\x2\x2\x39;\x3\x2\x2\x2:\x38\x3\x2\x2\x2;<\a\x1B\x2\x2<"+
		"\x3\x3\x2\x2\x2=\x41\x5\x6\x4\x2>\x41\x5\b\x5\x2?\x41\x5\n\x6\x2@=\x3"+
		"\x2\x2\x2@>\x3\x2\x2\x2@?\x3\x2\x2\x2\x41\x5\x3\x2\x2\x2\x42\x43\a\x6"+
		"\x2\x2\x43\x44\x5\x10\t\x2\x44\x45\a\x1D\x2\x2\x45\x46\a\x10\x2\x2\x46"+
		"G\t\x2\x2\x2GH\a\x1E\x2\x2H\a\x3\x2\x2\x2IJ\x5\x10\t\x2JO\a\x1D\x2\x2"+
		"KL\a\x1F\x2\x2LN\a\x1D\x2\x2MK\x3\x2\x2\x2NQ\x3\x2\x2\x2OM\x3\x2\x2\x2"+
		"OP\x3\x2\x2\x2PR\x3\x2\x2\x2QO\x3\x2\x2\x2RS\a\x1E\x2\x2S\t\x3\x2\x2\x2"+
		"TU\a\x4\x2\x2UV\a\x1D\x2\x2VZ\a\x1A\x2\x2WY\x5\b\x5\x2XW\x3\x2\x2\x2Y"+
		"\\\x3\x2\x2\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2[]\x3\x2\x2\x2\\Z\x3\x2\x2\x2"+
		"]^\a\x1B\x2\x2^\v\x3\x2\x2\x2_\x62\x5\x10\t\x2`\x62\a\f\x2\x2\x61_\x3"+
		"\x2\x2\x2\x61`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x64\a\x1D\x2\x2\x64"+
		"g\a\x16\x2\x2\x65h\x5\xE\b\x2\x66h\x3\x2\x2\x2g\x65\x3\x2\x2\x2g\x66\x3"+
		"\x2\x2\x2hi\x3\x2\x2\x2im\a\x17\x2\x2jl\x5\b\x5\x2kj\x3\x2\x2\x2lo\x3"+
		"\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2\x2\x2np\x3\x2\x2\x2om\x3\x2\x2\x2pq\x5"+
		"\x14\v\x2q\r\x3\x2\x2\x2rs\x5\x10\t\x2sz\a\x1D\x2\x2tu\a\x1F\x2\x2uv\x5"+
		"\x10\t\x2vw\a\x1D\x2\x2wy\x3\x2\x2\x2xt\x3\x2\x2\x2y|\x3\x2\x2\x2zx\x3"+
		"\x2\x2\x2z{\x3\x2\x2\x2{\xF\x3\x2\x2\x2|z\x3\x2\x2\x2}\x81\a\x1D\x2\x2"+
		"~\x7F\a\x18\x2\x2\x7F\x82\a\x19\x2\x2\x80\x82\x3\x2\x2\x2\x81~\x3\x2\x2"+
		"\x2\x81\x80\x3\x2\x2\x2\x82\x11\x3\x2\x2\x2\x83\x8E\x5$\x13\x2\x84\x85"+
		"\a\x10\x2\x2\x85\x8F\x5\x1E\x10\x2\x86\x89\a\x16\x2\x2\x87\x8A\x5\x16"+
		"\f\x2\x88\x8A\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x89\x88\x3\x2\x2\x2\x8A"+
		"\x8B\x3\x2\x2\x2\x8B\x8F\a\x17\x2\x2\x8C\x8F\a+\x2\x2\x8D\x8F\a,\x2\x2"+
		"\x8E\x84\x3\x2\x2\x2\x8E\x86\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8D\x3"+
		"\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x91\a\x1E\x2\x2\x91\xCE\x3\x2\x2\x2"+
		"\x92\x93\a\b\x2\x2\x93\x94\a\x16\x2\x2\x94\x95\x5\x18\r\x2\x95\x96\a\x17"+
		"\x2\x2\x96\x9A\x5\x12\n\x2\x97\x98\a\a\x2\x2\x98\x9B\x5\x12\n\x2\x99\x9B"+
		"\x3\x2\x2\x2\x9A\x97\x3\x2\x2\x2\x9A\x99\x3\x2\x2\x2\x9B\xCE\x3\x2\x2"+
		"\x2\x9C\x9D\a\xE\x2\x2\x9D\x9E\a\x16\x2\x2\x9E\x9F\x5\x1E\x10\x2\x9F\xA2"+
		"\a\x1E\x2\x2\xA0\xA3\x5\x18\r\x2\xA1\xA3\x3\x2\x2\x2\xA2\xA0\x3\x2\x2"+
		"\x2\xA2\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA7\a\x1E\x2\x2\xA5\xA8"+
		"\x5\x12\n\x2\xA6\xA8\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA6\x3\x2\x2"+
		"\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAA\a\x17\x2\x2\xAA\xAB\x5\x12\n\x2\xAB\xCE"+
		"\x3\x2\x2\x2\xAC\xAD\a\r\x2\x2\xAD\xAE\a\x16\x2\x2\xAE\xAF\x5\x18\r\x2"+
		"\xAF\xB0\a\x17\x2\x2\xB0\xB1\x5\x12\n\x2\xB1\xCE\x3\x2\x2\x2\xB2\xB3\a"+
		"\x5\x2\x2\xB3\xCE\a\x1E\x2\x2\xB4\xB7\a\v\x2\x2\xB5\xB8\x5\x1E\x10\x2"+
		"\xB6\xB8\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB6\x3\x2\x2\x2\xB8\xB9\x3"+
		"\x2\x2\x2\xB9\xCE\a\x1E\x2\x2\xBA\xBB\a\n\x2\x2\xBB\xBC\a\x16\x2\x2\xBC"+
		"\xBD\x5$\x13\x2\xBD\xBE\a\x17\x2\x2\xBE\xBF\a\x1E\x2\x2\xBF\xCE\x3\x2"+
		"\x2\x2\xC0\xC1\a\xF\x2\x2\xC1\xC2\a\x16\x2\x2\xC2\xC6\x5\x1E\x10\x2\xC3"+
		"\xC4\a\x1F\x2\x2\xC4\xC7\a\x3\x2\x2\xC5\xC7\x3\x2\x2\x2\xC6\xC3\x3\x2"+
		"\x2\x2\xC6\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\a\x17\x2\x2\xC9"+
		"\xCA\a\x1E\x2\x2\xCA\xCE\x3\x2\x2\x2\xCB\xCE\x5\x14\v\x2\xCC\xCE\a\x1E"+
		"\x2\x2\xCD\x83\x3\x2\x2\x2\xCD\x92\x3\x2\x2\x2\xCD\x9C\x3\x2\x2\x2\xCD"+
		"\xAC\x3\x2\x2\x2\xCD\xB2\x3\x2\x2\x2\xCD\xB4\x3\x2\x2\x2\xCD\xBA\x3\x2"+
		"\x2\x2\xCD\xC0\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCC\x3\x2\x2\x2\xCE"+
		"\x13\x3\x2\x2\x2\xCF\xD3\a\x1A\x2\x2\xD0\xD2\x5\x12\n\x2\xD1\xD0\x3\x2"+
		"\x2\x2\xD2\xD5\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4"+
		"\xD6\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6\xD7\a\x1B\x2\x2\xD7\x15\x3\x2"+
		"\x2\x2\xD8\xDD\x5\x1E\x10\x2\xD9\xDA\a\x1F\x2\x2\xDA\xDC\x5\x1E\x10\x2"+
		"\xDB\xD9\x3\x2\x2\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE\x3"+
		"\x2\x2\x2\xDE\x17\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xE0\xE5\x5\x1A\xE\x2"+
		"\xE1\xE2\a*\x2\x2\xE2\xE4\x5\x1A\xE\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE7\x3"+
		"\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\x19\x3\x2\x2\x2"+
		"\xE7\xE5\x3\x2\x2\x2\xE8\xED\x5\x1C\xF\x2\xE9\xEA\a)\x2\x2\xEA\xEC\x5"+
		"\x1C\xF\x2\xEB\xE9\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2"+
		"\xED\xEE\x3\x2\x2\x2\xEE\x1B\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xF0\xF1\x5"+
		"\x1E\x10\x2\xF1\xF2\x5&\x14\x2\xF2\xF3\x5\x1E\x10\x2\xF3\x1D\x3\x2\x2"+
		"\x2\xF4\xF7\a\x14\x2\x2\xF5\xF7\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF6\xF5"+
		"\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xFE\x5 \x11\x2\xF9\xFA\x5(\x15\x2"+
		"\xFA\xFB\x5 \x11\x2\xFB\xFD\x3\x2\x2\x2\xFC\xF9\x3\x2\x2\x2\xFD\x100\x3"+
		"\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x1F\x3\x2\x2\x2"+
		"\x100\xFE\x3\x2\x2\x2\x101\x107\x5\"\x12\x2\x102\x103\x5*\x16\x2\x103"+
		"\x104\x5\"\x12\x2\x104\x106\x3\x2\x2\x2\x105\x102\x3\x2\x2\x2\x106\x109"+
		"\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108!\x3\x2\x2"+
		"\x2\x109\x107\x3\x2\x2\x2\x10A\x112\x5$\x13\x2\x10B\x10E\a\x16\x2\x2\x10C"+
		"\x10F\x5\x16\f\x2\x10D\x10F\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2\x10E\x10D"+
		"\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x113\a\x17\x2\x2\x111\x113\x3"+
		"\x2\x2\x2\x112\x10B\x3\x2\x2\x2\x112\x111\x3\x2\x2\x2\x113\x125\x3\x2"+
		"\x2\x2\x114\x125\a\x3\x2\x2\x115\x125\a\x38\x2\x2\x116\x125\a\x36\x2\x2"+
		"\x117\x118\a\t\x2\x2\x118\x11E\a\x1D\x2\x2\x119\x11A\a\x18\x2\x2\x11A"+
		"\x11B\x5\x1E\x10\x2\x11B\x11C\a\x19\x2\x2\x11C\x11F\x3\x2\x2\x2\x11D\x11F"+
		"\x3\x2\x2\x2\x11E\x119\x3\x2\x2\x2\x11E\x11D\x3\x2\x2\x2\x11F\x125\x3"+
		"\x2\x2\x2\x120\x121\a\x16\x2\x2\x121\x122\x5\x1E\x10\x2\x122\x123\a\x17"+
		"\x2\x2\x123\x125\x3\x2\x2\x2\x124\x10A\x3\x2\x2\x2\x124\x114\x3\x2\x2"+
		"\x2\x124\x115\x3\x2\x2\x2\x124\x116\x3\x2\x2\x2\x124\x117\x3\x2\x2\x2"+
		"\x124\x120\x3\x2\x2\x2\x125#\x3\x2\x2\x2\x126\x12F\a\x1D\x2\x2\x127\x128"+
		"\a \x2\x2\x128\x12E\a\x1D\x2\x2\x129\x12A\a\x18\x2\x2\x12A\x12B\x5\x1E"+
		"\x10\x2\x12B\x12C\a\x19\x2\x2\x12C\x12E\x3\x2\x2\x2\x12D\x127\x3\x2\x2"+
		"\x2\x12D\x129\x3\x2\x2\x2\x12E\x131\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2"+
		"\x12F\x130\x3\x2\x2\x2\x130%\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x132\x139"+
		"\a\x30\x2\x2\x133\x139\a\x31\x2\x2\x134\x139\a\x34\x2\x2\x135\x139\a\x32"+
		"\x2\x2\x136\x139\a\x35\x2\x2\x137\x139\a\x33\x2\x2\x138\x132\x3\x2\x2"+
		"\x2\x138\x133\x3\x2\x2\x2\x138\x134\x3\x2\x2\x2\x138\x135\x3\x2\x2\x2"+
		"\x138\x136\x3\x2\x2\x2\x138\x137\x3\x2\x2\x2\x139\'\x3\x2\x2\x2\x13A\x13D"+
		"\a\x13\x2\x2\x13B\x13D\a\x14\x2\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13B\x3"+
		"\x2\x2\x2\x13D)\x3\x2\x2\x2\x13E\x142\a\x11\x2\x2\x13F\x142\a\x12\x2\x2"+
		"\x140\x142\a\x15\x2\x2\x141\x13E\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x141"+
		"\x140\x3\x2\x2\x2\x142+\x3\x2\x2\x2$\x31\x38@OZ\x61gmz\x81\x89\x8E\x9A"+
		"\xA2\xA7\xB7\xC6\xCD\xD3\xDD\xE5\xED\xF6\xFE\x107\x10E\x112\x11E\x124"+
		"\x12D\x12F\x138\x13C\x141";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace prograCompi
