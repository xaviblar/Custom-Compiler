//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Xavier\Downloads\Progra_Compiladores\Progra Compiladores\prograCompi\prograCompi\ParserProgra.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace prograCompi {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ParserProgra"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public interface IParserPrograListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>stateWriteAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStateWriteAST([NotNull] ParserProgra.StateWriteASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stateWriteAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStateWriteAST([NotNull] ParserProgra.StateWriteASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stateReturnAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStateReturnAST([NotNull] ParserProgra.StateReturnASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stateReturnAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStateReturnAST([NotNull] ParserProgra.StateReturnASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>boolFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolFactorAST([NotNull] ParserProgra.BoolFactorASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolFactorAST([NotNull] ParserProgra.BoolFactorASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>tokenNewFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTokenNewFactorAST([NotNull] ParserProgra.TokenNewFactorASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>tokenNewFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTokenNewFactorAST([NotNull] ParserProgra.TokenNewFactorASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stateReadAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStateReadAST([NotNull] ParserProgra.StateReadASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stateReadAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStateReadAST([NotNull] ParserProgra.StateReadASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>statementForAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementForAST([NotNull] ParserProgra.StatementForASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>statementForAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementForAST([NotNull] ParserProgra.StatementForASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>majorAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMajorAST([NotNull] ParserProgra.MajorASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>majorAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMajorAST([NotNull] ParserProgra.MajorASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprActParsAST</c>
	/// labeled alternative in <see cref="ParserProgra.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprActParsAST([NotNull] ParserProgra.ExprActParsASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprActParsAST</c>
	/// labeled alternative in <see cref="ParserProgra.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprActParsAST([NotNull] ParserProgra.ExprActParsASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>equalAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualAST([NotNull] ParserProgra.EqualASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>equalAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualAST([NotNull] ParserProgra.EqualASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>tokenConstConstDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.constDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTokenConstConstDeclAST([NotNull] ParserProgra.TokenConstConstDeclASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>tokenConstConstDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.constDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTokenConstConstDeclAST([NotNull] ParserProgra.TokenConstConstDeclASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stateBreakAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStateBreakAST([NotNull] ParserProgra.StateBreakASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stateBreakAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStateBreakAST([NotNull] ParserProgra.StateBreakASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>typeVarDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeVarDeclAST([NotNull] ParserProgra.TypeVarDeclASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeVarDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeVarDeclAST([NotNull] ParserProgra.TypeVarDeclASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>tokenClassClassDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTokenClassClassDeclAST([NotNull] ParserProgra.TokenClassClassDeclASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>tokenClassClassDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTokenClassClassDeclAST([NotNull] ParserProgra.TokenClassClassDeclASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>factorMulopFactorTermAST</c>
	/// labeled alternative in <see cref="ParserProgra.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactorMulopFactorTermAST([NotNull] ParserProgra.FactorMulopFactorTermASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>factorMulopFactorTermAST</c>
	/// labeled alternative in <see cref="ParserProgra.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactorMulopFactorTermAST([NotNull] ParserProgra.FactorMulopFactorTermASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>typeIDFormParsAST</c>
	/// labeled alternative in <see cref="ParserProgra.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIDFormParsAST([NotNull] ParserProgra.TypeIDFormParsASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeIDFormParsAST</c>
	/// labeled alternative in <see cref="ParserProgra.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIDFormParsAST([NotNull] ParserProgra.TypeIDFormParsASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>termAddlopExprAST</c>
	/// labeled alternative in <see cref="ParserProgra.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTermAddlopExprAST([NotNull] ParserProgra.TermAddlopExprASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>termAddlopExprAST</c>
	/// labeled alternative in <see cref="ParserProgra.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTermAddlopExprAST([NotNull] ParserProgra.TermAddlopExprASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>divAST</c>
	/// labeled alternative in <see cref="ParserProgra.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivAST([NotNull] ParserProgra.DivASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>divAST</c>
	/// labeled alternative in <see cref="ParserProgra.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivAST([NotNull] ParserProgra.DivASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>addAST</c>
	/// labeled alternative in <see cref="ParserProgra.addlop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddAST([NotNull] ParserProgra.AddASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addAST</c>
	/// labeled alternative in <see cref="ParserProgra.addlop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddAST([NotNull] ParserProgra.AddASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>designatorFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignatorFactorAST([NotNull] ParserProgra.DesignatorFactorASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>designatorFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignatorFactorAST([NotNull] ParserProgra.DesignatorFactorASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>majorEqualAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMajorEqualAST([NotNull] ParserProgra.MajorEqualASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>majorEqualAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMajorEqualAST([NotNull] ParserProgra.MajorEqualASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>minorAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinorAST([NotNull] ParserProgra.MinorASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>minorAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinorAST([NotNull] ParserProgra.MinorASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>condFactCondTermAST</c>
	/// labeled alternative in <see cref="ParserProgra.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondFactCondTermAST([NotNull] ParserProgra.CondFactCondTermASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>condFactCondTermAST</c>
	/// labeled alternative in <see cref="ParserProgra.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondFactCondTermAST([NotNull] ParserProgra.CondFactCondTermASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>designatorStatementAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignatorStatementAST([NotNull] ParserProgra.DesignatorStatementASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>designatorStatementAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignatorStatementAST([NotNull] ParserProgra.DesignatorStatementASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stateBlockAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStateBlockAST([NotNull] ParserProgra.StateBlockASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stateBlockAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStateBlockAST([NotNull] ParserProgra.StateBlockASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>statePyCAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatePyCAST([NotNull] ParserProgra.StatePyCASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>statePyCAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatePyCAST([NotNull] ParserProgra.StatePyCASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>condTermConditionAST</c>
	/// labeled alternative in <see cref="ParserProgra.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondTermConditionAST([NotNull] ParserProgra.CondTermConditionASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>condTermConditionAST</c>
	/// labeled alternative in <see cref="ParserProgra.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondTermConditionAST([NotNull] ParserProgra.CondTermConditionASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>statementBlockAST</c>
	/// labeled alternative in <see cref="ParserProgra.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementBlockAST([NotNull] ParserProgra.StatementBlockASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>statementBlockAST</c>
	/// labeled alternative in <see cref="ParserProgra.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementBlockAST([NotNull] ParserProgra.StatementBlockASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stateWhileAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStateWhileAST([NotNull] ParserProgra.StateWhileASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stateWhileAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStateWhileAST([NotNull] ParserProgra.StateWhileASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>numFactoAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumFactoAST([NotNull] ParserProgra.NumFactoASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numFactoAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumFactoAST([NotNull] ParserProgra.NumFactoASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>modAST</c>
	/// labeled alternative in <see cref="ParserProgra.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModAST([NotNull] ParserProgra.ModASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>modAST</c>
	/// labeled alternative in <see cref="ParserProgra.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModAST([NotNull] ParserProgra.ModASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>idTypeAST</c>
	/// labeled alternative in <see cref="ParserProgra.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdTypeAST([NotNull] ParserProgra.IdTypeASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idTypeAST</c>
	/// labeled alternative in <see cref="ParserProgra.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdTypeAST([NotNull] ParserProgra.IdTypeASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprRelopExprCondFactAST</c>
	/// labeled alternative in <see cref="ParserProgra.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprRelopExprCondFactAST([NotNull] ParserProgra.ExprRelopExprCondFactASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprRelopExprCondFactAST</c>
	/// labeled alternative in <see cref="ParserProgra.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprRelopExprCondFactAST([NotNull] ParserProgra.ExprRelopExprCondFactASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprFactorAST([NotNull] ParserProgra.ExprFactorASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprFactorAST([NotNull] ParserProgra.ExprFactorASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>programTokenClassAST</c>
	/// labeled alternative in <see cref="ParserProgra.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgramTokenClassAST([NotNull] ParserProgra.ProgramTokenClassASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>programTokenClassAST</c>
	/// labeled alternative in <see cref="ParserProgra.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgramTokenClassAST([NotNull] ParserProgra.ProgramTokenClassASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>designLabelAST</c>
	/// labeled alternative in <see cref="ParserProgra.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignLabelAST([NotNull] ParserProgra.DesignLabelASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>designLabelAST</c>
	/// labeled alternative in <see cref="ParserProgra.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignLabelAST([NotNull] ParserProgra.DesignLabelASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>subAST</c>
	/// labeled alternative in <see cref="ParserProgra.addlop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubAST([NotNull] ParserProgra.SubASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>subAST</c>
	/// labeled alternative in <see cref="ParserProgra.addlop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubAST([NotNull] ParserProgra.SubASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>charFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharFactorAST([NotNull] ParserProgra.CharFactorASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>charFactorAST</c>
	/// labeled alternative in <see cref="ParserProgra.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharFactorAST([NotNull] ParserProgra.CharFactorASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>differentAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDifferentAST([NotNull] ParserProgra.DifferentASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>differentAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDifferentAST([NotNull] ParserProgra.DifferentASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>programAuxLabelAST</c>
	/// labeled alternative in <see cref="ParserProgra.programAux"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgramAuxLabelAST([NotNull] ParserProgra.ProgramAuxLabelASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>programAuxLabelAST</c>
	/// labeled alternative in <see cref="ParserProgra.programAux"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgramAuxLabelAST([NotNull] ParserProgra.ProgramAuxLabelASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>minorEqualAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinorEqualAST([NotNull] ParserProgra.MinorEqualASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>minorEqualAST</c>
	/// labeled alternative in <see cref="ParserProgra.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinorEqualAST([NotNull] ParserProgra.MinorEqualASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>mulAST</c>
	/// labeled alternative in <see cref="ParserProgra.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulAST([NotNull] ParserProgra.MulASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mulAST</c>
	/// labeled alternative in <see cref="ParserProgra.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulAST([NotNull] ParserProgra.MulASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>typeFormVarMethodDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeFormVarMethodDeclAST([NotNull] ParserProgra.TypeFormVarMethodDeclASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeFormVarMethodDeclAST</c>
	/// labeled alternative in <see cref="ParserProgra.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeFormVarMethodDeclAST([NotNull] ParserProgra.TypeFormVarMethodDeclASTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>statementIFAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementIFAST([NotNull] ParserProgra.StatementIFASTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>statementIFAST</c>
	/// labeled alternative in <see cref="ParserProgra.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementIFAST([NotNull] ParserProgra.StatementIFASTContext context);
}
} // namespace prograCompi
